{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "bakankaya&#39;s blog",
	"language": "en",
	"home_page_url": "https://bakankaya.xyz/",
	"feed_url": "https://bakankaya.xyz/feed/feed.json",
	"description": "desctiption",
	"author": {
		"name": "bakankaya",
		"url": "https://bakankaya.xyz/about/"
	},
	"items": [
		{
			"id": "https://bakankaya.xyz/blog/04_Ph%20continues/",
			"url": "https://bakankaya.xyz/blog/04_Ph%20continues/",
			"title": "Publishing",
			"content_html": "<p>vır vır çır çır</p>\n",
			"date_published": "2024-06-03T00:00:00Z"
		}
		,
		{
			"id": "https://bakankaya.xyz/blog/02_Publising/",
			"url": "https://bakankaya.xyz/blog/02_Publising/",
			"title": "Publishing",
			"content_html": "<p>bla bla</p>\n",
			"date_published": "2024-06-03T00:00:00Z"
		}
		,
		{
			"id": "https://bakankaya.xyz/blog/01_show_less/",
			"url": "https://bakankaya.xyz/blog/01_show_less/",
			"title": "Show Less/More",
			"content_html": "<p>I wanted to create a accordion like show/hide functionality to my React project. It was a simple enough request from client (me!), but it was not a simple search for my part.</p>\n<p>First of all, the things I wanted to show was an array full of objects and the initial rendering was made by a <code>.map</code> method.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arrayName <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">]</span>\n  \n<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token punctuation\">{</span>arrayName<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arrayItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>Component\n            key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItem<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n            title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItemt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n            description<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItem<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span>\n            url<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItem<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  </code></pre>\n<p>I didn't wanted to change the whole code just for this. So I tried to find a solution around the code.</p>\n<p>My first idea was to limit the viewport, hide the overflow with some css and connect the button to viewport to widen the part where my list is rendered. It was simple, fast and first to come to mind.</p>\n<p>But it has caveats of its own. First of all it would be a responsiveness hell. Also, it was all or limited, maybe in the future I wanted a more gradual system like show more&gt; show more&gt; show more... show less/collapse. So it was a good oppurtunity to create a <code>useState</code> hook.</p>\n<p>So I defined the useState array at the start of the main function:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>itemList<span class=\"token punctuation\">,</span> setItemList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>I preferred the conventional naming for everything. It actually doesn't matter what you name them, but for readability I chose the boring names.<br>\nfor the initial state I wrote '3' because that's the number of items I wanted to show, well... 'initially'.</p>\n<p>So now the imporant part comes. To find this solution took some time on my part.<br>\nAs I mentioned, rendered array used a <code>.map</code> method. Which maps <em>all</em> the items in array. How can I show less, and more importantly, then change the number to show more?</p>\n<p>Well the answer is another method called <code>.slice</code>.</p>\n<p>And in JavaScript you can use more than one method on the same line;</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>arrayName<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> itemList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arrayItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>Component\n            key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItem<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n            title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItemt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n            description<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItem<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span>\n            url<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItem<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span>\n            imageSrc<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>arrayItem<span class=\"token punctuation\">.</span>imageSrc<span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre>\n<p>It takes two arguments the start and end point of a 'slice' of your array. Since I wanted to start from the begining all the time first one is '0', second was the 'itemList' and this way I can change it anytime I want.</p>\n<p>then I added a function to manipulate the state:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itemList <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setItemList</span><span class=\"token punctuation\">(</span>arrayName<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setItemList</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>It is pretty straight foward but I'll explain anyway. When clicked if the itemlist in initial state which is 3, change the state to array's length, which means all of it.<br>\nWhen state is changed, and become more than 3 else is run when we call the function, which changes the state to 3 again.<br>\n(This comparison probably be made with absolute compare <code>===</code> better. But it works all the same in this case.)</p>\n<p>And lastly a Button to bind the function added to the rendering part:</p>\n<pre class=\"language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    \n    <span class=\"token operator\">...</span>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p>Now, This buttons text needs to change to 'more' or 'less'. And we can do it with a simple ternary script here as well.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">condition <span class=\"token operator\">?</span> exprIfTrue <span class=\"token operator\">:</span> exprIfFalse</code></pre>\n<p>Another way that we can do it with is to add this to <code>handleClick</code> and pass it to rendering parts. But I have other plans for there later, so this will do fine. so in our case it will be like this;</p>\n<pre class=\"language-jsx\" tabindex=\"0\"><code class=\"language-jsx\"><span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>itemsList <span class=\"token operator\">===</span> <span class=\"token number\">3</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Show More\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Show Less\"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre>\n<p><strong>Sucsess!</strong> Now with useState I made a functional button that shows More/Less.</p>\n<p>But now the position of viewport changes and leaves me in unwanted places everytime I press the button. So it would be nice to add some animation and change the position as well. So I expand my <code>handleClick</code> function a little more;</p>\n<pre class=\"language-jsx\" tabindex=\"0\"><code class=\"language-jsx\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>itemList<span class=\"token punctuation\">,</span> setItemList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> startElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"section-start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> endElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"section-end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itemList <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setItemList</span><span class=\"token punctuation\">(</span>projects<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      endElement<span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">behavior</span><span class=\"token operator\">:</span> <span class=\"token string\">\"smooth\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">block</span><span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setItemList</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      startElement<span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">behavior</span><span class=\"token operator\">:</span> <span class=\"token string\">\"smooth\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">block</span><span class=\"token operator\">:</span> <span class=\"token string\">\"start\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>with <code>getElementById</code> I added some <code>id</code> to places I wanted to scroll and locate them in my function.\nthen with <code>.scrollIntoView</code> I change my viewport everytime I pressed the button.</p>\n",
			"date_published": "2024-06-01T00:00:00Z"
		}
		,
		{
			"id": "https://bakankaya.xyz/blog/00_hello_world/",
			"url": "https://bakankaya.xyz/blog/00_hello_world/",
			"title": "Hello, World!",
			"content_html": "<p>I guess it is a suitable first post for a blog about programming. I'm neither an engineer nor a programmer per se, but I'm an enthusiast and an aspiring developer. I was born in an internetless era, so everything that has been made so far has been magical to me, and it has been my true interest and hobby since I was a child. I started to get serious about it, which is relatively new. For more than two years, I have been studying at bootcamps, in certification programs, for an undergraduate degree, and so on.</p>\n<p>In other words, I have been in tutorial hell. And I will continue to be. Because I'm still learning and discovering. This blog is another part of it.</p>\n<p>I wanted to create a blog for a very long time; better late than never. In this blog, I will share what I learned and how I learned it. Maybe in time I can start to share what I created as well. Wishful thinking for now.</p>\n<p>You can find all my study notes, my resources, and my conclusions. I will try to organize the information to be useful, foremost for me. The details, the how-tos, and the and the tricks are hard to come by. If anyone willingly starts to read this blog, they can be a fellow traveler with me on this never-ending journey of learning.</p>\n<p>I will try to keep my opinions out of them, because the web is full of it, and nowadays it has become a pollution. And I will try to be responsible with your time; I don't want to waste it on arguments. My point is that this blog aims to be useful, not wasteful.</p>\n<p>Hello, world.... These are the words we print out in every programming tutorial—the first and most simple programs we write. It became a tradition, which I am fond of. Because it implies excitement and ambition. I think this is the first small step to greatness. What we are going to do is important enough to announce to the world.</p>\n<p>And the first words of a baby program, saluting as well. I may not create a blog that matters to the world. Far from greatness, more like a study book.</p>\n<p>Anyway, welcome!</p>\n<p><a href=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\">&quot;Hello, World!&quot; Wikipedia Page</a></p>\n",
			"date_published": "2024-05-31T00:00:00Z"
		}
		
	]
}
